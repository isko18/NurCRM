import uuid
from datetime import timedelta
from django.core.exceptions import ValidationError
from django.db import models
from django.utils import timezone
from django.conf import settings

from apps.users.models import Company  # –ø–æ–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


class BarberProfile(models.Model):
    """–ú–∞—Å—Ç–µ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞."""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name='barbers', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è'
    )

    full_name = models.CharField(max_length=128, verbose_name='–§–ò–û')
    phone = models.CharField(max_length=32, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω', blank=True, null=True)
    extra_phone = models.CharField(max_length=32, verbose_name='–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω', blank=True, null=True)
    work_schedule = models.CharField(
        max_length=128, verbose_name='–ì—Ä–∞—Ñ–∏–∫ (–Ω–∞–ø—Ä. –ü–Ω‚Äì–ü—Ç 10‚Äì18)', blank=True, null=True
    )
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω')

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ú–∞—Å—Ç–µ—Ä'
        verbose_name_plural = '–ú–∞—Å—Ç–µ—Ä–∞'
        indexes = [
            models.Index(fields=['company', 'is_active']),
        ]

    def __str__(self):
        return self.full_name

    @property
    def is_busy_now(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç."""
        now = timezone.now()
        return self.appointments.filter(
            status__in=[Appointment.Status.BOOKED, Appointment.Status.CONFIRMED],
            start_at__lte=now, end_at__gt=now
        ).exists()


class Service(models.Model):
    """–£—Å–ª—É–≥–∞ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞."""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name='services', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è'
    )
    name = models.CharField(max_length=128, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∞')

    class Meta:
        verbose_name = '–£—Å–ª—É–≥–∞'
        verbose_name_plural = '–£—Å–ª—É–≥–∏'
        unique_together = ('company', 'name')
        indexes = [models.Index(fields=['company', 'is_active'])]

    def __str__(self):
        return f'{self.name} ‚Äî {self.price}‚ÇΩ'


class Client(models.Model):
    """–ö–ª–∏–µ–Ω—Ç."""
    class Status(models.TextChoices):
        ACTIVE = 'active', '–ê–∫—Ç–∏–≤–µ–Ω'
        INACTIVE = 'inactive', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'
        VIP = 'vip', 'VIP'
        BLACKLIST = 'blacklist', '–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name='barber_clients', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è'
    )

    full_name = models.CharField(max_length=128, verbose_name='–§–ò–û')
    phone = models.CharField(max_length=32, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω', db_index=True)
    email = models.EmailField(blank=True, null=True, verbose_name='Email')
    birth_date = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
    status = models.CharField(
        max_length=16, choices=Status.choices, default=Status.ACTIVE, verbose_name='–°—Ç–∞—Ç—É—Å'
    )
    notes = models.TextField(blank=True, null=True, verbose_name='–ó–∞–º–µ—Ç–∫–∏')

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ö–ª–∏–µ–Ω—Ç'
        verbose_name_plural = '–ö–ª–∏–µ–Ω—Ç—ã'
        unique_together = ('company', 'phone')
        indexes = [models.Index(fields=['company', 'status'])]

    def __str__(self):
        return self.full_name


class Appointment(models.Model):
    """–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É."""

    class Status(models.TextChoices):
        BOOKED = "booked", "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        CONFIRMED = "confirmed", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
        COMPLETED = "completed", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        CANCELED = "canceled", "–û—Ç–º–µ–Ω–µ–Ω–æ"
        NO_SHOW = "no_show", "–ù–µ –ø—Ä–∏—à—ë–ª"

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company,
        on_delete=models.CASCADE,
        related_name="appointments",
        verbose_name="–ö–æ–º–ø–∞–Ω–∏—è",
    )
    client = models.ForeignKey(
        Client,
        on_delete=models.PROTECT,
        related_name="appointments",
        verbose_name="–ö–ª–∏–µ–Ω—Ç",
    )
    # üîë —Ç–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä ‚Äî —ç—Ç–æ User
    barber = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name="appointments",
        verbose_name="–ú–∞—Å—Ç–µ—Ä",
    )
    service = models.ForeignKey(
        Service,
        on_delete=models.PROTECT,
        related_name="appointments",
        verbose_name="–£—Å–ª—É–≥–∞",
    )

    start_at = models.DateTimeField(verbose_name="–ù–∞—á–∞–ª–æ")
    end_at = models.DateTimeField(verbose_name="–ö–æ–Ω–µ—Ü")
    status = models.CharField(
        max_length=16, choices=Status.choices, default=Status.BOOKED, db_index=True
    )
    comment = models.TextField(blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–ó–∞–ø–∏—Å—å"
        verbose_name_plural = "–ó–∞–ø–∏—Å–∏"
        indexes = [
            models.Index(fields=["company", "start_at"]),
            models.Index(fields=["status"]),
            models.Index(fields=["barber", "start_at"]),
        ]
        constraints = [
            models.CheckConstraint(
                check=models.Q(end_at__gt=models.F("start_at")),
                name="appointment_end_after_start",
            ),
        ]

    def __str__(self):
        return f"{self.client} ‚Üí {self.service} ({self.start_at:%Y-%m-%d %H:%M})"

    def clean(self):
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–æ –º–∞—Å—Ç–µ—Ä—É
        if self.barber_id and self.start_at and self.end_at:
            overlaps = Appointment.objects.filter(
                barber_id=self.barber_id,
                status__in=[self.Status.BOOKED, self.Status.CONFIRMED],
            ).exclude(id=self.id).filter(
                start_at__lt=self.end_at,
                end_at__gt=self.start_at,
            )
            if overlaps.exists():
                raise ValidationError("–£ –º–∞—Å—Ç–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
        if self.company_id:
            if self.client and self.client.company_id != self.company_id:
                raise ValidationError("–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            if self.barber and self.barber.company_id != self.company_id:
                raise ValidationError("–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
            if self.service and self.service.company_id != self.company_id:
                raise ValidationError("–£—Å–ª—É–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

    def save(self, *args, **kwargs):
        self.full_clean()
        return super().save(*args, **kwargs)
    
class Folder(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name='barber_folders', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è'
    )
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏', max_length=255)
    parent = models.ForeignKey(
        'self', on_delete=models.CASCADE, null=True, blank=True,
        related_name='children', verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞'
    )

    class Meta:
        verbose_name = '–ü–∞–ø–∫–∞'
        verbose_name_plural = '–ü–∞–ø–∫–∏'
        unique_together = (('company', 'parent', 'name'),)
        indexes = [models.Index(fields=['company', 'parent', 'name'])]

    def __str__(self):
        return self.name


class Document(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)  # UUID PK
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="barber_documents", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )

    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", max_length=255, blank=True)
    file = models.FileField("–§–∞–π–ª", upload_to="documents/")
    folder = models.ForeignKey(
        Folder, on_delete=models.CASCADE, related_name="documents", verbose_name="–ü–∞–ø–∫–∞"
    )

    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª—ë–Ω", auto_now=True)

    class Meta:
        verbose_name = "–î–æ–∫—É–º–µ–Ω—Ç"
        verbose_name_plural = "–î–æ–∫—É–º–µ–Ω—Ç—ã"
        ordering = ["name"]
        indexes = [models.Index(fields=["company"])]

    def __str__(self):
        return self.name or self.file.name

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ —É –ø–∞–ø–∫–∏ –µ—Å—Ç—å company)
        folder_company_id = getattr(self.folder, 'company_id', None)
        if folder_company_id and self.company_id and folder_company_id != self.company_id:
            raise ValidationError({'folder': '–ü–∞–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})