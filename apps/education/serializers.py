from rest_framework import serializers
from .models import (
    Lead, Course, Group, Student, Lesson,
    Folder, Document, Attendance, TeacherRate
)
from apps.users.models import User   # üîë –∏—Å–ø–æ–ª—å–∑—É–µ–º User –≤–º–µ—Å—Ç–æ Teacher


class CompanyReadOnlyMixin:
    def create(self, validated_data):
        request = self.context.get('request')
        if request and getattr(getattr(request.user, 'company', None), 'id', None):
            validated_data['company'] = request.user.company
        return super().create(validated_data)

    def update(self, instance, validated_data):
        request = self.context.get('request')
        if request and getattr(getattr(request.user, 'company', None), 'id', None):
            validated_data['company'] = request.user.company
        return super().update(instance, validated_data)


# ====== Lead ======
class LeadSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')

    class Meta:
        model = Lead
        fields = [
            'id', 'company', 'name', 'phone', 'source', 'note', 'created_at'
        ]
        read_only_fields = ['id', 'company', 'created_at']


# ====== Course ======
class CourseSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')

    class Meta:
        model = Course
        fields = ['id', 'company', 'title', 'price_per_month']
        read_only_fields = ['id', 'company']


# ====== Group ======
class GroupSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')
    course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.all())

    course_title = serializers.CharField(source='course.title', read_only=True)

    class Meta:
        model = Group
        fields = [
            'id', 'company', 'course', 'course_title',
            'name'
        ]
        read_only_fields = ['id', 'company', 'course_title']

    def validate(self, attrs):
        request = self.context.get('request')
        user_company_id = getattr(getattr(request.user, 'company', None), 'id', None)

        course = attrs.get('course') or getattr(self.instance, 'course', None)
        if user_company_id and course and course.company_id != user_company_id:
            raise serializers.ValidationError({'course': '–ö—É—Ä—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})
        return attrs


# ====== Student ======
class StudentSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')
    group = serializers.PrimaryKeyRelatedField(queryset=Group.objects.all(), allow_null=True, required=False)
    group_name = serializers.CharField(source='group.name', read_only=True)

    class Meta:
        model = Student
        fields = [
            'id', 'company', 'name', 'phone', 'status',
            'group', 'group_name', 'discount', 'note', 'created_at', "active"
        ]
        read_only_fields = ['id', 'company', 'created_at', 'group_name']

    def validate_group(self, group):
        if group is None:
            return group
        request = self.context.get('request')
        user_company_id = getattr(getattr(request.user, 'company', None), 'id', None)
        if user_company_id and group.company_id != user_company_id:
            raise serializers.ValidationError('–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')
        return group


# ====== Lesson ======
# ====== Lesson ======
class LessonSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')

    group = serializers.PrimaryKeyRelatedField(queryset=Group.objects.all())
    course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.all(), required=False)
    teacher = serializers.PrimaryKeyRelatedField(queryset=User.objects.all(), allow_null=True, required=False)

    group_name = serializers.CharField(source='group.name', read_only=True)
    course_title = serializers.CharField(source='course.title', read_only=True)
    teacher_name = serializers.SerializerMethodField()

    class Meta:
        model = Lesson
        fields = [
            'id', 'company',
            'group', 'group_name',
            'course', 'course_title',
            'teacher', 'teacher_name',
            'date', 'time', 'duration', 'classroom', 'created_at'
        ]
        read_only_fields = ['id', 'company', 'created_at', 'group_name', 'course_title', 'teacher_name']

    def get_teacher_name(self, obj):
        if obj.teacher:
            return f"{obj.teacher.first_name} {obj.teacher.last_name}".strip() or obj.teacher.email
        return None

    def validate(self, attrs):
        request = self.context.get('request')
        company_id = getattr(getattr(request.user, 'company', None), 'id', None)

        group   = attrs.get('group')   or getattr(self.instance, 'group', None)
        course  = attrs.get('course')  if 'course'  in attrs else getattr(self.instance, 'course', None)
        teacher = attrs.get('teacher') if 'teacher' in attrs else getattr(self.instance, 'teacher', None)

        # company checks
        if company_id and group  and group.company_id  != company_id:
            raise serializers.ValidationError({'group':  '–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})
        if company_id and course and course.company_id != company_id:
            raise serializers.ValidationError({'course': '–ö—É—Ä—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})
        if company_id and teacher and teacher.company_id != company_id:
            raise serializers.ValidationError({'teacher': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})

        # –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∫—É—Ä—Å –≥—Ä—É–ø–ø—ã
        if not course and group:
            attrs['course'] = group.course
            course = attrs['course']

        # –∫—É—Ä—Å —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫—É—Ä—Å–æ–º –≥—Ä—É–ø–ø—ã
        if group and course and group.course_id != course.id:
            raise serializers.ValidationError({'course': '–ö—É—Ä—Å —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫—É—Ä—Å–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.'})

        return attrs

# ====== Folder ======
class FolderSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')
    parent = serializers.PrimaryKeyRelatedField(queryset=Folder.objects.all(), allow_null=True, required=False)
    parent_name = serializers.CharField(source='parent.name', read_only=True)

    class Meta:
        model = Folder
        fields = ['id', 'company', 'name', 'parent', 'parent_name']
        read_only_fields = ['id', 'company', 'parent_name']
        ref_name = "EducationFolder"

    def validate_parent(self, parent):
        if parent is None:
            return parent
        request = self.context.get('request')
        user_company_id = getattr(getattr(request.user, 'company', None), 'id', None)
        if user_company_id and parent.company_id != user_company_id:
            raise serializers.ValidationError('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')
        return parent


# ====== Document ======
class DocumentSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')
    folder_name = serializers.CharField(source='folder.name', read_only=True)

    class Meta:
        model = Document
        fields = [
            'id', 'company', 'name', 'file',
            'folder', 'folder_name',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'company', 'created_at', 'updated_at', 'folder_name']
        ref_name = "EducationDocument"

    def validate_folder(self, folder):
        request = self.context.get('request')
        user_company_id = getattr(getattr(request.user, 'company', None), 'id', None)
        if user_company_id and folder and folder.company_id != user_company_id:
            raise serializers.ValidationError('–ü–∞–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.')
        return folder


# ====== Attendance (–æ–±—â–∏–π CRUD, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) ======
class AttendanceSerializer(CompanyReadOnlyMixin, serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source='company.id')

    class Meta:
        model = Attendance
        fields = [
            'id', 'company', 'lesson', 'student',
            'present', 'note', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'company', 'created_at', 'updated_at']
        ref_name = "EducationAttendance"

    def validate(self, attrs):
        request = self.context.get('request')
        user_company_id = getattr(getattr(request.user, 'company', None), 'id', None)

        lesson = attrs.get('lesson') or getattr(self.instance, 'lesson', None)
        student = attrs.get('student') or getattr(self.instance, 'student', None)

        if user_company_id and lesson and lesson.company_id != user_company_id:
            raise serializers.ValidationError({'lesson': '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})
        if user_company_id and student and student.company_id != user_company_id:
            raise serializers.ValidationError({'student': '–°—Ç—É–¥–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'})
        if lesson and student and student.group_id != lesson.group_id:
            raise serializers.ValidationError({'student': '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è.'})
        return attrs


# ====== Lesson attendance snapshot (GET/PUT /lessons/{id}/attendance/) ======
class LessonAttendanceItemSerializer(serializers.Serializer):
    """–≠–ª–µ–º–µ–Ω—Ç —Å–Ω–∏–º–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞."""
    student = serializers.UUIDField()
    present = serializers.BooleanField(allow_null=True)
    note = serializers.CharField(allow_blank=True, required=False)
    # –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (GET) ‚Äî –∏–º—è —É—á–µ–Ω–∏–∫–∞
    student_name = serializers.CharField(read_only=True)

class LessonAttendanceSnapshotSerializer(serializers.Serializer):
    """–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è PUT /lessons/{id}/attendance/ (–¥–ª—è —Å—Ö–µ–º—ã)."""
    attendances = LessonAttendanceItemSerializer(many=True)


# ====== –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞ (GET /students/{id}/attendance/) ======
class StudentAttendanceSerializer(serializers.ModelSerializer):
    lesson = serializers.UUIDField(source='lesson.id', read_only=True)
    date = serializers.DateField(source='lesson.date', read_only=True)
    time = serializers.TimeField(source='lesson.time', read_only=True)
    group = serializers.CharField(source='lesson.group.name', read_only=True)

    class Meta:
        model = Attendance
        fields = ("lesson", "date", "time", "group", "present", "note")
        ref_name = "EducationStudentAttendanceItem"


class TeacherRateSerializer(serializers.ModelSerializer):
    company = serializers.ReadOnlyField(source="company.id")
    # —è–≤–Ω–æ —É–∫–∞–∂–µ–º queryset (–∏–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è OpenAPI)
    teacher = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    teacher_name = serializers.CharField(source="teacher.get_full_name", read_only=True)

    class Meta:
        model = TeacherRate
        fields = [
            "id", "company",
            "teacher", "teacher_name",
            "period", "mode", "rate",
            "created_at", "updated_at",
        ]
        read_only_fields = ["id", "company", "teacher_name", "created_at", "updated_at"]

    def validate(self, attrs):
        request = self.context["request"]
        company = request.user.company

        teacher = attrs.get("teacher", getattr(self.instance, "teacher", None))
        period  = attrs.get("period",  getattr(self.instance, "period",  None))
        mode    = attrs.get("mode",    getattr(self.instance, "mode",    None))

        # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –≤ User –µ—Å—Ç—å company_id)
        teacher_company_id = getattr(teacher, "company_id", None)
        if teacher and teacher_company_id and teacher_company_id != company.id:
            raise serializers.ValidationError({"teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})

        # —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–≤–º–µ—Å—Ç–æ 500 –ø–æ –ë–î-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é)
        if teacher and period and mode:
            qs = TeacherRate.objects.filter(
                company_id=company.id,
                teacher=teacher,
                period=period,
                mode=mode,
            )
            if self.instance:
                qs = qs.exclude(pk=self.instance.pk)
            if qs.exists():
                raise serializers.ValidationError({
                    "non_field_errors": ["–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ä–µ–∂–∏–º–∞."]
                })

        return attrs

    def create(self, validated_data):
        validated_data["company"] = self.context["request"].user.company
        return super().create(validated_data)

    def update(self, instance, validated_data):
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º company –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        validated_data["company"] = self.context["request"].user.company
        return super().update(instance, validated_data)