from django.db import models
import uuid
from apps.users.models import User, Company
from mptt.models import MPTTModel, TreeForeignKey
from django.db import models
from mptt.models import MPTTModel, TreeForeignKey

class ProductCategory(MPTTModel):
    name = models.CharField(max_length=128, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='categories', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')
    parent = TreeForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
    )

    class MPTTMeta:
        order_insertion_by = ['name']

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'

    def __str__(self):
        return self.name


class ProductBrand(MPTTModel):
    name = models.CharField(max_length=128, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞')
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='brands', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ
    parent = TreeForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±—Ä–µ–Ω–¥'
    )

    class MPTTMeta:
        order_insertion_by = ['name']

    class Meta:
        verbose_name = '–ë—Ä–µ–Ω–¥'
        verbose_name_plural = '–ë—Ä–µ–Ω–¥—ã'

    def __str__(self):
        return self.name

class Contact(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='contacts')
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='contacts')

    name = models.CharField(max_length=128)
    email = models.EmailField()
    phone = models.CharField(max_length=32)
    address = models.CharField(max_length=256)
    client_company = models.CharField(max_length=128)
    notes = models.TextField(blank=True, null=True)
    department = models.CharField(max_length=64, blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–ö–æ–Ω—Ç–∞–∫—Ç'
        verbose_name_plural = '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.name} ({self.client_company})"


class Pipeline(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='pipelines')
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pipelines')

    name = models.CharField(max_length=128)
    stages = models.JSONField()

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂'
        verbose_name_plural = '–í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂'
        ordering = ['-created_at']

    def __str__(self):
        return self.name


class Deal(models.Model):
    STATUS_CHOICES = [
        ('lead', '–õ–∏–¥'),
        ('prospect', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'),
        ('deal', '–°–¥–µ–ª–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ'),
        ('closed', '–ó–∞–∫—Ä—ã—Ç–∞'),
        ('lost', '–ü–æ—Ç–µ—Ä—è–Ω–∞'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='deals')
    pipeline = models.ForeignKey(Pipeline, on_delete=models.CASCADE, related_name='deals')
    contact = models.ForeignKey(Contact, on_delete=models.CASCADE, related_name='deals')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='assigned_deals')

    title = models.CharField(max_length=255)
    value = models.DecimalField(max_digits=12, decimal_places=2)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES)
    stage = models.CharField(max_length=128)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–°–¥–µ–ª–∫–∞'
        verbose_name_plural = '–°–¥–µ–ª–∫–∏'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.title} ({self.status})"


class Task(models.Model):
    STATUS_CHOICES = [
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('in_progress', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'),
        ('done', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='tasks')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='tasks')
    deal = models.ForeignKey(Deal, on_delete=models.SET_NULL, null=True, blank=True, related_name='tasks')

    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    due_date = models.DateTimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–ó–∞–¥–∞—á–∞'
        verbose_name_plural = '–ó–∞–¥–∞—á–∏'
        ordering = ['-due_date']

    def __str__(self):
        return f"{self.title} ‚Äî {self.status}"

class Order(models.Model):
    STATUS_CHOICES = [
        ('new', '–ù–æ–≤—ã–π'),
        ('pending', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'),
        ('completed', '–ó–∞–≤–µ—Ä—à—ë–Ω'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='orders')

    order_number = models.CharField(max_length=50)
    customer_name = models.CharField(max_length=128)
    date_ordered = models.DateField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='new')
    phone = models.CharField(max_length=32)
    department = models.CharField(max_length=64)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã'
        ordering = ['-date_ordered']

    def __str__(self):
        return f"{self.order_number} ‚Äî {self.customer_name}"

    @property
    def total(self):
        return sum(item.total for item in self.items.all())

    @property
    def total_quantity(self):
        return sum(item.quantity for item in self.items.all())


    
    
class Product(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='products')

    name = models.CharField(max_length=128)
    article = models.CharField(max_length=64)
    brand = models.ForeignKey(ProductBrand, on_delete=models.SET_NULL, null=True, blank=True, related_name='products', verbose_name='–ë—Ä–µ–Ω–¥')
    category = models.ForeignKey(ProductCategory, on_delete=models.SET_NULL, null=True, blank=True, related_name='products', verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'
        ordering = ['-created_at']
        
    def __str__(self):
        return f"{self.name} ({self.article})"
    
class OrderItem(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items', verbose_name='–ó–∞–∫–∞–∑')
    product = models.ForeignKey(Product, on_delete=models.PROTECT, related_name='order_items', verbose_name='–¢–æ–≤–∞—Ä')
    quantity = models.PositiveIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', editable=False)
    total = models.DecimalField(max_digits=12, decimal_places=2, verbose_name='–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞', editable=False)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ'

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"



class Review(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='reviews')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reviews')

    rating = models.PositiveSmallIntegerField()
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–û—Ç–∑—ã–≤'
        verbose_name_plural = '–û—Ç–∑—ã–≤—ã'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.email} ‚Äî {self.rating}‚òÖ"


class Notification(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='notifications')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')

    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        verbose_name_plural = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.email}: {self.message[:30]}..."


class Integration(models.Model):
    TYPE_CHOICES = [
        ('telephony', '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è'),
        ('messenger', '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä'),
        ('1c', '1C'),
    ]

    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω–∞'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='integrations')

    type = models.CharField(max_length=20, choices=TYPE_CHOICES)
    config = models.JSONField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='inactive')

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        verbose_name_plural = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.type} ‚Äî {self.status}"

class Analytics(models.Model):
    TYPE_CHOICES = [
        ('sales', '–ü—Ä–æ–¥–∞–∂–∏'),
        ('activity', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='analytics')

    type = models.CharField(max_length=20, choices=TYPE_CHOICES)
    data = models.JSONField()  # –ü—Ä–∏–º–µ—Ä: {"metric": "total_sales", "value": 150000, "date": "2025-06-01"}

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
        verbose_name_plural = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.type} ‚Äî {self.data.get('metric', '')}"


class Event(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='events')
    title = models.CharField(max_length=255)
    datetime = models.DateTimeField()
    participants = models.ManyToManyField(User, related_name='events')

    notes = models.TextField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–°–æ–±—ã—Ç–∏–µ'
        verbose_name_plural = '–°–æ–±—ã—Ç–∏—è'
        ordering = ['-datetime']

    def __str__(self):
        return f"{self.title} ‚Äî {self.datetime.strftime('%Y-%m-%d %H:%M')}" 
    
class Warehouse(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID —Å–∫–ª–∞–¥–∞')
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞')
    location = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='warehouses', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–°–∫–ª–∞–¥'
        verbose_name_plural = '–°–∫–ª–∞–¥—ã'
        ordering = ['created_at']

    
class WarehouseEvent(models.Model):
    STATUS_CHOICES = [
        ('draf', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('conducted', '–ü—Ä–æ–≤–µ–¥–µ–Ω'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID —Å–æ–±—ã—Ç–∏—è')
    warehouse = models.ForeignKey(Warehouse, on_delete=models.CASCADE, related_name='events', verbose_name='–°–∫–ª–∞–¥')
    responsible_person = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='responsible_warehouse_events', verbose_name='–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, verbose_name='–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è')
    client_name = models.CharField(max_length=128, verbose_name='–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞')
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è')
    description = models.TextField(blank=True, null=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è')
    amount = models.DecimalField(max_digits=12, decimal_places=2, verbose_name='–°—É–º–º–∞')
    event_date = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è')
    participants = models.ManyToManyField(User, related_name='warehouse_events', verbose_name='–£—á–∞—Å—Ç–Ω–∏–∫–∏')

    # –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è created_at –∏ updated_at
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è')

    def __str__(self):
        return f"{self.title} ‚Äî {self.event_date.strftime('%Y-%m-%d %H:%M')}"

    class Meta:
        verbose_name = '–°–∫–ª–∞–¥—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ'
        verbose_name_plural = '–°–∫–ª–∞–¥—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è'
        ordering = ['event_date']
          

class Client(models.Model):
    STATUS_CHOICES = [
        ('new', '–ù–æ–≤—ã–π'),
        ('contacted', '–°–≤—è–∑–∞–ª–∏—Å—å'),
        ('interested', '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω'),
        ('converted', '–°—Ç–∞–ª –∫–ª–∏–µ–Ω—Ç–æ–º'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'),
        ('lost', '–ü–æ—Ç–µ—Ä—è–Ω'),
        ('paid_for', '–û–ø–ª–∞—á–µ–Ω–æ'),
        ('awaiting', '–û–∂–∏–¥–∞–µ—Ç'),
        ('credit', '–î–æ–ª–≥'),
        ('rejection', '–û—Ç–∫–∞–∑'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID –∫–ª–∏–µ–Ω—Ç–∞')
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='clients', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')
    full_name = models.CharField(max_length=255, verbose_name='–§–ò–û')
    phone = models.CharField(max_length=32, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, verbose_name='–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞')
    price = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    def __str__(self):
        return f"{self.full_name} ({self.phone})"

    class Meta:
        verbose_name = '–ö–ª–∏–µ–Ω—Ç'
        verbose_name_plural = '–ö–ª–∏–µ–Ω—Ç—ã'
        ordering = ['-created_at']
