from django.db import models
from apps.users.models import Company
from apps.main.models import ProductBrand, ProductCategory
import uuid


# üì¶ –°–∫–ª–∞–¥
class Warehouse(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="storehouse_warehouses", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    address = models.CharField(max_length=500, verbose_name="–ê–¥—Ä–µ—Å", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–°–∫–ª–∞–¥"
        verbose_name_plural = "–°–∫–ª–∞–¥—ã"
        ordering = ["name"]

    def __str__(self):
        return f"{self.name} ({self.company})"


# üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫
class Supplier(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="suppliers", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    contact_name = models.CharField(max_length=255, verbose_name="–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–∞", blank=True, null=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True, null=True)
    address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å", blank=True, null=True)
    email = models.EmailField(verbose_name="Email", blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–ü–æ—Å—Ç–∞–≤—â–∏–∫"
        verbose_name_plural = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        ordering = ["name"]

    def __str__(self):
        return f"{self.name} ({self.phone})"



# üõí –¢–æ–≤–∞—Ä
class Product(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="storehouse_products", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    barcode = models.CharField(max_length=64, blank=True, null=True, verbose_name="–®—Ç—Ä–∏—Ö-–∫–æ–¥")

    brand = models.ForeignKey(
        ProductBrand, on_delete=models.SET_NULL,
        null=True, blank=True, related_name="products", verbose_name="–ë—Ä–µ–Ω–¥"
    )
    category = models.ForeignKey(
        ProductCategory, on_delete=models.SET_NULL,
        null=True, blank=True, related_name="products", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

    unit = models.CharField(max_length=32, verbose_name="–ï–¥. –∏–∑–º.", default="—à—Ç")
    purchase_price = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏", default=0)
    selling_price = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", default=0)
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    class Meta:
        unique_together = ("company", "barcode")
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ["name"]

    def __str__(self):
        return f"{self.name} ({self.unit})"


# üìä –û—Å—Ç–∞—Ç–∫–∏
class Stock(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.CASCADE, related_name="stocks", verbose_name="–°–∫–ª–∞–¥"
    )
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="stocks", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", default=0)

    class Meta:
        unique_together = ("warehouse", "product")
        verbose_name = "–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ"
        verbose_name_plural = "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"

    def __str__(self):
        return f"{self.product.name} ‚Äî {self.quantity} {self.product.unit} (–Ω–∞ {self.warehouse.name})"


# üì• –ü—Ä–∏—Ö–æ–¥
class StockIn(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_ins", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")
    supplier = models.ForeignKey(
        Supplier, on_delete=models.PROTECT, related_name="deliveries", verbose_name="–ü–æ—Å—Ç–∞–≤—â–∏–∫"
    )
    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="incoming", verbose_name="–°–∫–ª–∞–¥"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–ü—Ä–∏—Ö–æ–¥"
        verbose_name_plural = "–ü—Ä–∏—Ö–æ–¥—ã"
        ordering = ["-date", "-id"]

    def __str__(self):
        return f"–ü—Ä–∏—Ö–æ–¥ {self.document_number} –æ—Ç {self.date}"


class StockInItem(models.Model):
    stock_in = models.ForeignKey(
        StockIn, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∞"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="stock_in_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    price = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏")

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"


# üì§ –†–∞—Å—Ö–æ–¥
class StockOut(models.Model):
    TYPE_CHOICES = [
        ("sale", "–ü—Ä–æ–¥–∞–∂–∞"),
        ("return", "–í–æ–∑–≤—Ä–∞—Ç"),
        ("write_off", "–°–ø–∏—Å–∞–Ω–∏–µ"),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_outs", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")
    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="outgoing", verbose_name="–°–∫–ª–∞–¥"
    )
    type = models.CharField(max_length=50, choices=TYPE_CHOICES, verbose_name="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
    recipient = models.CharField(max_length=255, verbose_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ö–æ–º–ø–∞–Ω–∏—è", blank=True, null=True)
    destination_address = models.CharField(max_length=500, verbose_name="–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–†–∞—Å—Ö–æ–¥"
        verbose_name_plural = "–†–∞—Å—Ö–æ–¥—ã"
        ordering = ["-date", "-id"]

    def __str__(self):
        return f"–†–∞—Å—Ö–æ–¥ {self.document_number} –æ—Ç {self.date}"


class StockOutItem(models.Model):
    stock_out = models.ForeignKey(
        StockOut, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="stock_out_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"


# üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
class StockTransfer(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_transfers", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")

    source_warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="transfers_out", verbose_name="–ò–∑ —Å–∫–ª–∞–¥–∞"
    )
    destination_warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="transfers_in", verbose_name="–í —Å–∫–ª–∞–¥"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"
        verbose_name_plural = "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
        ordering = ["-date", "-id"]

    def clean(self):
        # –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã
        if self.source_warehouse == self.destination_warehouse:
            from django.core.exceptions import ValidationError
            raise ValidationError("–°–∫–ª–∞–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏.")

    def __str__(self):
        return f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {self.document_number} {self.source_warehouse} ‚Üí {self.destination_warehouse}"


class StockTransferItem(models.Model):
    transfer = models.ForeignKey(
        StockTransfer, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="transfer_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"
