import uuid
from decimal import Decimal
from django.db import models
from django.core.validators import MinValueValidator
from django.core.exceptions import ValidationError

from apps.users.models import Company, Branch
from apps.main.models import ProductBrand, ProductCategory


# üì¶ –°–∫–ª–∞–¥
class Warehouse(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="storehouse_warehouses", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π (NULL) –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="storehouse_warehouses",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    address = models.CharField(max_length=500, verbose_name="–ê–¥—Ä–µ—Å", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–°–∫–ª–∞–¥"
        verbose_name_plural = "–°–∫–ª–∞–¥—ã"
        ordering = ["name"]
        constraints = [
            # –∏–º—è —Å–∫–ª–∞–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ñ–∏–ª–∏–∞–ª–∞
            models.UniqueConstraint(
                fields=("branch", "name"),
                name="uq_wh_name_per_branch",
                condition=models.Q(branch__isnull=False),
            ),
            # –∏ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
            models.UniqueConstraint(
                fields=("company", "name"),
                name="uq_wh_name_global_per_company",
                condition=models.Q(branch__isnull=True),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "name"]),
            models.Index(fields=["company", "branch", "name"]),
        ]

    def __str__(self):
        return f"{self.name}"

    def clean(self):
        if self.branch_id and self.branch.company_id != self.company_id:
            raise ValidationError({"branch": "–§–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})


# üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫
class Supplier(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="suppliers", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π (NULL) –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="suppliers",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    contact_name = models.CharField(max_length=255, verbose_name="–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–∞", blank=True, null=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True, null=True)
    address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å", blank=True, null=True)
    email = models.EmailField(verbose_name="Email", blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "–ü–æ—Å—Ç–∞–≤—â–∏–∫"
        verbose_name_plural = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        ordering = ["name"]
        constraints = [
            models.UniqueConstraint(
                fields=("branch", "name"),
                name="uq_supplier_name_per_branch",
                condition=models.Q(branch__isnull=False),
            ),
            models.UniqueConstraint(
                fields=("company", "name"),
                name="uq_supplier_name_global_per_company",
                condition=models.Q(branch__isnull=True),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "name"]),
            models.Index(fields=["company", "branch", "name"]),
        ]

    def __str__(self):
        return f"{self.name}"

    def clean(self):
        if self.branch_id and self.branch.company_id != self.company_id:
            raise ValidationError({"branch": "–§–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})


# üõí –¢–æ–≤–∞—Ä
class Product(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    company = models.ForeignKey(
        Company, on_delete=models.CASCADE,
        related_name="storehouse_products", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π (NULL) –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="storehouse_products",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    barcode = models.CharField(max_length=64, blank=True, null=True, verbose_name="–®—Ç—Ä–∏—Ö-–∫–æ–¥")

    brand = models.ForeignKey(
        ProductBrand, on_delete=models.SET_NULL,
        null=True, blank=True, related_name="products", verbose_name="–ë—Ä–µ–Ω–¥"
    )
    category = models.ForeignKey(
        ProductCategory, on_delete=models.SET_NULL,
        null=True, blank=True, related_name="products", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

    unit = models.CharField(max_length=32, verbose_name="–ï–¥. –∏–∑–º.", default="—à—Ç")
    purchase_price = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏",
        default=0, validators=[MinValueValidator(Decimal("0"))]
    )
    selling_price = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏",
        default=0, validators=[MinValueValidator(Decimal("0"))]
    )
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ["name"]
        constraints = [
            # barcode —É–Ω–∏–∫–∞–ª–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ñ–∏–ª–∏–∞–ª–∞
            models.UniqueConstraint(
                fields=("branch", "barcode"),
                name="uq_product_barcode_per_branch",
                condition=models.Q(branch__isnull=False) & models.Q(barcode__isnull=False) & ~models.Q(barcode=""),
            ),
            # –∏ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
            models.UniqueConstraint(
                fields=("company", "barcode"),
                name="uq_product_barcode_global_per_company",
                condition=models.Q(branch__isnull=True) & models.Q(barcode__isnull=False) & ~models.Q(barcode=""),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "name"]),
            models.Index(fields=["company", "branch", "name"]),
            models.Index(fields=["company", "is_active"]),
            models.Index(fields=["company", "branch", "category"]),
            models.Index(fields=["company", "branch", "brand"]),
        ]

    def __str__(self):
        return f"{self.name} ({self.unit})"

    def clean(self):
        if self.branch_id and self.branch.company_id != self.company_id:
            raise ValidationError({"branch": "–§–∏–ª–∏–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})


# üìä –û—Å—Ç–∞—Ç–∫–∏
class Stock(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.CASCADE, related_name="stocks", verbose_name="–°–∫–ª–∞–¥"
    )
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="stocks", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        default=0, validators=[MinValueValidator(Decimal("0"))]
    )

    class Meta:
        verbose_name = "–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ"
        verbose_name_plural = "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"
        constraints = [
            models.UniqueConstraint(fields=("warehouse", "product"), name="uq_stock_wh_product"),
        ]
        indexes = [
            models.Index(fields=["warehouse", "product"]),
            models.Index(fields=["product"]),
        ]

    def __str__(self):
        return f"{self.product.name} ‚Äî {self.quantity} {self.product.unit} (–Ω–∞ {self.warehouse.name})"

    def clean(self):
        # company: —Å–∫–ª–∞–¥ –∏ —Ç–æ–≤–∞—Ä –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        if self.product_id and self.warehouse_id:
            if self.product.company_id != self.warehouse.company_id:
                raise ValidationError({"product": "–¢–æ–≤–∞—Ä –∏ —Å–∫–ª–∞–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º."})
            # branch: —Ç–æ–≤–∞—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞, —á—Ç–æ –∏ —Å–∫–ª–∞–¥
            if self.warehouse.branch_id and self.product.branch_id not in (None, self.warehouse.branch_id):
                raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞, —á–µ–º —Å–∫–ª–∞–¥."})


# üì• –ü—Ä–∏—Ö–æ–¥
class StockIn(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_ins", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    # –¥–æ–∫—É–º–µ–Ω—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ñ–∏–ª–∏–∞–ª—å–Ω—ã–π (–ø–æ —Å–∫–ª–∞–¥—É/–ø–æ—Å—Ç–∞–≤—â–∏–∫—É)
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="stock_ins",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")
    supplier = models.ForeignKey(
        Supplier, on_delete=models.PROTECT, related_name="deliveries", verbose_name="–ü–æ—Å—Ç–∞–≤—â–∏–∫"
    )
    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="incoming", verbose_name="–°–∫–ª–∞–¥"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–ü—Ä–∏—Ö–æ–¥"
        verbose_name_plural = "–ü—Ä–∏—Ö–æ–¥—ã"
        ordering = ["-date", "-id"]
        constraints = [
            # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ñ–∏–ª–∏–∞–ª–∞
            models.UniqueConstraint(
                fields=("company", "branch", "document_number"),
                name="uq_stockin_company_branch_docnum",
                condition=models.Q(branch__isnull=False),
            ),
            # –∏ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
            models.UniqueConstraint(
                fields=("company", "document_number"),
                name="uq_stockin_company_docnum_global",
                condition=models.Q(branch__isnull=True),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "date"]),
            models.Index(fields=["company", "branch", "date"]),
            models.Index(fields=["company", "branch", "warehouse", "date"]),
            models.Index(fields=["company", "branch", "supplier", "date"]),
        ]

    def __str__(self):
        return f"–ü—Ä–∏—Ö–æ–¥ {self.document_number} –æ—Ç {self.date}"

    def clean(self):
        # company
        if self.supplier and self.supplier.company_id != self.company_id:
            raise ValidationError({"supplier": "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        if self.warehouse and self.warehouse.company_id != self.company_id:
            raise ValidationError({"warehouse": "–°–∫–ª–∞–¥ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        # branch —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        if self.branch_id and self.supplier and self.supplier.branch_id not in (None, self.branch_id):
            raise ValidationError({"supplier": "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."})
        if self.branch_id and self.warehouse and self.warehouse.branch_id not in (None, self.branch_id):
            raise ValidationError({"warehouse": "–°–∫–ª–∞–¥ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."})


class StockInItem(models.Model):
    stock_in = models.ForeignKey(
        StockIn, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∞"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="stock_in_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        validators=[MinValueValidator(Decimal("0.01"))]
    )
    price = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏",
        validators=[MinValueValidator(Decimal("0"))]
    )

    class Meta:
        verbose_name = "–ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∞"
        verbose_name_plural = "–ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞"
        indexes = [
            models.Index(fields=["stock_in"]),
            models.Index(fields=["product"]),
        ]

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"

    def clean(self):
        if not (self.stock_in and self.product):
            return
        # company
        if self.product.company_id != self.stock_in.company_id:
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        # branch: —Ç–æ–≤–∞—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–ª–∏ branch –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if self.stock_in.branch_id and self.product.branch_id not in (None, self.stock_in.branch_id):
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞, —á–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∞."})


# üì§ –†–∞—Å—Ö–æ–¥
class StockOut(models.Model):
    TYPE_CHOICES = [
        ("sale", "–ü—Ä–æ–¥–∞–∂–∞"),
        ("return", "–í–æ–∑–≤—Ä–∞—Ç"),
        ("write_off", "–°–ø–∏—Å–∞–Ω–∏–µ"),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_outs", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="stock_outs",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")
    warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="outgoing", verbose_name="–°–∫–ª–∞–¥"
    )
    type = models.CharField(max_length=50, choices=TYPE_CHOICES, verbose_name="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
    recipient = models.CharField(max_length=255, verbose_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ö–æ–º–ø–∞–Ω–∏—è", blank=True, null=True)
    destination_address = models.CharField(max_length=500, verbose_name="–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–†–∞—Å—Ö–æ–¥"
        verbose_name_plural = "–†–∞—Å—Ö–æ–¥—ã"
        ordering = ["-date", "-id"]
        constraints = [
            models.UniqueConstraint(
                fields=("company", "branch", "document_number"),
                name="uq_stockout_company_branch_docnum",
                condition=models.Q(branch__isnull=False),
            ),
            models.UniqueConstraint(
                fields=("company", "document_number"),
                name="uq_stockout_company_docnum_global",
                condition=models.Q(branch__isnull=True),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "date"]),
            models.Index(fields=["company", "branch", "date"]),
            models.Index(fields=["company", "branch", "warehouse", "date"]),
            models.Index(fields=["company", "branch", "type", "date"]),
        ]

    def __str__(self):
        return f"–†–∞—Å—Ö–æ–¥ {self.document_number} –æ—Ç {self.date}"

    def clean(self):
        if self.warehouse and self.warehouse.company_id != self.company_id:
            raise ValidationError({"warehouse": "–°–∫–ª–∞–¥ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        if self.branch_id and self.warehouse and self.warehouse.branch_id not in (None, self.branch_id):
            raise ValidationError({"warehouse": "–°–∫–ª–∞–¥ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."})


class StockOutItem(models.Model):
    stock_out = models.ForeignKey(
        StockOut, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="stock_out_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(
        max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        validators=[MinValueValidator(Decimal("0.01"))]
    )

    class Meta:
        verbose_name = "–ü–æ–∑–∏—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
        verbose_name_plural = "–ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"
        indexes = [
            models.Index(fields=["stock_out"]),
            models.Index(fields=["product"]),
        ]

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"

    def clean(self):
        if not (self.stock_out and self.product):
            return
        if self.product.company_id != self.stock_out.company_id:
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        if self.stock_out.branch_id and self.product.branch_id not in (None, self.stock_out.branch_id):
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞, —á–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞."})


# üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
class StockTransfer(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    company = models.ForeignKey(
        Company, on_delete=models.CASCADE, related_name="stock_transfers", verbose_name="–ö–æ–º–ø–∞–Ω–∏—è"
    )
    branch = models.ForeignKey(
        Branch, on_delete=models.CASCADE, related_name="stock_transfers",
        verbose_name="–§–∏–ª–∏–∞–ª", null=True, blank=True, db_index=True
    )
    document_number = models.CharField(max_length=50, verbose_name="‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")

    source_warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="transfers_out", verbose_name="–ò–∑ —Å–∫–ª–∞–¥–∞"
    )
    destination_warehouse = models.ForeignKey(
        Warehouse, on_delete=models.PROTECT, related_name="transfers_in", verbose_name="–í —Å–∫–ª–∞–¥"
    )

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")

    class Meta:
        verbose_name = "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"
        verbose_name_plural = "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
        ordering = ["-date", "-id"]
        constraints = [
            models.UniqueConstraint(
                fields=("company", "branch", "document_number"),
                name="uq_transfer_company_branch_docnum",
                condition=models.Q(branch__isnull=False),
            ),
            models.UniqueConstraint(
                fields=("company", "document_number"),
                name="uq_transfer_company_docnum_global",
                condition=models.Q(branch__isnull=True),
            ),
        ]
        indexes = [
            models.Index(fields=["company", "date"]),
            models.Index(fields=["company", "branch", "date"]),
            models.Index(fields=["company", "branch", "source_warehouse", "destination_warehouse"]),
        ]

    def clean(self):
        # —Ä–∞–∑–Ω—ã–µ —Å–∫–ª–∞–¥—ã
        if self.source_warehouse_id and self.destination_warehouse_id:
            if self.source_warehouse_id == self.destination_warehouse_id:
                raise ValidationError("–°–∫–ª–∞–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏.")
        # company
        if self.source_warehouse and self.source_warehouse.company_id != self.company_id:
            raise ValidationError({"source_warehouse": "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏."})
        if self.destination_warehouse and self.destination_warehouse.company_id != self.company_id:
            raise ValidationError({"destination_warehouse": "–ü—Ä–∏—ë–º–Ω–∏–∫ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        # branch —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –æ–±–∞ —Å–∫–ª–∞–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–ª–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
        if self.branch_id:
            if self.source_warehouse and self.source_warehouse.branch_id not in (None, self.branch_id):
                raise ValidationError({"source_warehouse": "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."})
            if self.destination_warehouse and self.destination_warehouse.branch_id not in (None, self.branch_id):
                raise ValidationError({"destination_warehouse": "–ü—Ä–∏—ë–º–Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."})

    def __str__(self):
        return f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {self.document_number} {self.source_warehouse} ‚Üí {self.destination_warehouse}"


class StockTransferItem(models.Model):
    transfer = models.ForeignKey(
        StockTransfer, on_delete=models.CASCADE, related_name="items", verbose_name="–î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
    )
    product = models.ForeignKey(
        Product, on_delete=models.PROTECT, related_name="transfer_items", verbose_name="–¢–æ–≤–∞—Ä"
    )
    quantity = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                                   validators=[MinValueValidator(Decimal("0.01"))])

    class Meta:
        verbose_name = "–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
        verbose_name_plural = "–ü–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
        indexes = [
            models.Index(fields=["transfer"]),
            models.Index(fields=["product"]),
        ]

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity} {self.product.unit}"

    def clean(self):
        if not (self.transfer and self.product):
            return
        if self.product.company_id != self.transfer.company_id:
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."})
        if self.transfer.branch_id and self.product.branch_id not in (None, self.transfer.branch_id):
            raise ValidationError({"product": "–¢–æ–≤–∞—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞, —á–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è."})
