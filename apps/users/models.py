from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
import uuid
from apps.users.managers import UserManager
from datetime import timedelta
from django.utils import timezone

class Feature(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    name = models.CharField(max_length=128)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–§—É–Ω–∫—Ü–∏—è'
        verbose_name_plural = '–§—É–Ω–∫—Ü–∏–∏'
        
class SubscriptionPlan(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    name = models.CharField(max_length=128)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    features = models.ManyToManyField(Feature, null=True, blank=True)  

    def __str__(self):
        return f"{self.name} - {self.price}‚ÇΩ"

    class Meta:
        verbose_name = '–¢–∞—Ä–∏—Ñ'
        verbose_name_plural = '–¢–∞—Ä–∏—Ñ—ã'

    def has_feature(self, feature_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–∞—Ä–∏—Ñ–µ"""
        return self.features.filter(name=feature_name).exists()


class Roles(models.TextChoices):
    ADMIN = 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    MANAGER = 'manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'
    USER = 'user', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
    OWNER = 'owner', "–í–ª–∞–¥–µ–ª–µ—Ü"

class Sector(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Ä–∞—Å–ª–∏')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–û—Ç—Ä–∞—Å–ª—å"
        verbose_name_plural = "–û—Ç—Ä–∞—Å–ª–∏"
        
class Industry(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    sectors = models.ManyToManyField(Sector, blank=True, related_name='industries', verbose_name='–û—Ç—Ä–∞—Å–ª–∏')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        verbose_name_plural = "–í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"


class User(AbstractBaseUser, PermissionsMixin):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    email = models.EmailField(unique=True, verbose_name='Email')
    password = models.CharField(max_length=128, verbose_name='–ü–∞—Ä–æ–ª—å')
    first_name = models.CharField(max_length=64, verbose_name='–ò–º—è')
    last_name = models.CharField(max_length=64, verbose_name='–§–∞–º–∏–ª–∏—è')
    avatar = models.URLField(blank=True, null=True, verbose_name='–ê–≤–∞—Ç–∞—Ä (URL)')

    company = models.ForeignKey('Company', on_delete=models.CASCADE, null=True, blank=True, related_name='employees', verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')
    role = models.CharField(
        max_length=32,
        choices=Roles.choices,
        blank=True,
        null=True,
        verbose_name='–†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
    )

    # üìå –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
    can_view_dashboard = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –æ–±–∑–æ—Ä—É')
    can_view_cashbox = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –∫–∞—Å—Å–µ')
    can_view_departments = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–µ–ª–∞–º')
    can_view_orders = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º')
    can_view_analytics = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ')
    can_view_products = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä–∞–º')
    can_view_booking = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é')
    can_view_department_analytics = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –æ—Ç–¥–µ–ª–æ–≤')
    can_view_employees = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º')
    can_view_clients = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç–∞–º')
    can_view_brand_category = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –±—Ä–µ–Ω–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    can_view_settings = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º')
    can_view_sale = models.BooleanField(default=False, blank=True, null=True, verbose_name='–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–∞–∂–∞–º')
    
    
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = UserManager()

    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'

    def __str__(self):
        return self.email

# –ú–æ–¥–µ–ª—å Company (–∫–æ–º–ø–∞–Ω–∏—è)
class Company(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
    subscription_plan = models.ForeignKey(SubscriptionPlan, on_delete=models.SET_NULL, null=True, blank=True)
    industry = models.ForeignKey(
        Industry,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    )
    sector = models.ForeignKey(
        Sector,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–û—Ç—Ä–∞—Å–ª—å'
    )
    owner = models.OneToOneField('User', on_delete=models.CASCADE, related_name='owned_company', verbose_name='–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    start_date = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', blank=True, null=True)
    end_date = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', blank=True, null=True) 
    can_view_documents = models.BooleanField(default=False, verbose_name='–î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º')
    can_view_whatsapp = models.BooleanField(default=False, verbose_name='–î–æ—Å—Ç—É–ø –∫ whatsapp')
    can_view_instagram = models.BooleanField(default=False, verbose_name='–î–æ—Å—Ç—É–ø –∫ instagram')
    can_view_telegram = models.BooleanField(default=False, verbose_name='–î–æ—Å—Ç—É–ø –∫ telegram')
    
    def save(self, *args, **kwargs):
        if not self.start_date:
            self.start_date = timezone.now()
        if not self.end_date and self.start_date:
            self.end_date = self.start_date + timedelta(days=10)
        super().save(*args, **kwargs)
        
    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–æ–º–ø–∞–Ω–∏—è'
        verbose_name_plural = '–ö–æ–º–ø–∞–Ω–∏–∏'
