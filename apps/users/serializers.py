from rest_framework import serializers
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from apps.users.models import User, Company, Roles
from rest_framework.validators import UniqueValidator
from django.core.mail import send_mail
from django.conf import settings
import string
import secrets

# ‚úÖ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        data = super().validate(attrs)
        data.update({
            'user_id': self.user.id,
            'email': self.user.email,
            'first_name': self.user.first_name,
            'last_name': self.user.last_name,
            'avatar': self.user.avatar,
            'company': self.user.company.name if self.user.company else None,
            'role': self.user.role
        })
        return data

# üë§ –ü–æ–ª–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=False, min_length=8, style={'input_type': 'password'})

    class Meta:
        model = User
        fields = [
            'id', 'email', 'password',
            'first_name', 'last_name',
            'avatar',
            'company', 'role',
            'created_at', 'updated_at',
        ]
        read_only_fields = ['id', 'created_at', 'updated_at', 'company']

    def validate_email(self, value):
        if self.instance and self.instance.email == value:
            return value
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("Email —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return value

    def validate_avatar(self, value):
        if value and not value.startswith(('http://', 'https://')):
            raise serializers.ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä.")
        return value

    def update(self, instance, validated_data):
        password = validated_data.pop('password', None)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        if password:
            instance.set_password(password)
        instance.save()
        return instance

# üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏
class OwnerRegisterSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=User.objects.all(), message="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")]
    )
    password = serializers.CharField(write_only=True, min_length=8, style={'input_type': 'password'})
    password2 = serializers.CharField(write_only=True, style={'input_type': 'password'})
    company_name = serializers.CharField(write_only=True, required=True)
    company_industry = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = [
            'email', 'password', 'password2',
            'first_name', 'last_name',
            'avatar',
            'company_name', 'company_industry'
        ]

    def validate(self, data):
        if data['password'] != data['password2']:
            raise serializers.ValidationError({"password2": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç."})
        return data

    def create(self, validated_data):
        company_name = validated_data.pop('company_name')
        company_industry = validated_data.pop('company_industry')
        validated_data.pop('password2')

        # –°–æ–∑–¥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏
        user = User.objects.create(
            email=validated_data['email'],
            first_name=validated_data['first_name'],
            last_name=validated_data['last_name'],
            avatar=validated_data.get('avatar'),
            role = 'owner',
            is_active=True
        )
        user.set_password(validated_data['password'])
        user.save()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        company = Company.objects.create(
            name=company_name,
            industry=company_industry,
            owner=user
        )

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ–º–ø–∞–Ω–∏—é
        user.company = company
        user.save()

        return user

# üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–∞—Ä–æ–ª—è + –æ—Ç–ø—Ä–∞–≤–∫–æ–π email
class EmployeeCreateSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=User.objects.all(), message="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")]
    )
    role = serializers.ChoiceField(choices=Roles.choices)

    class Meta:
        model = User
        fields = [
            'email', 'first_name', 'last_name', 'avatar', 'role'
        ]

    def create(self, validated_data):
        request = self.context['request']
        owner = request.user
        company = owner.owned_company

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        alphabet = string.ascii_letters + string.digits
        generated_password = ''.join(secrets.choice(alphabet) for i in range(10))

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user = User.objects.create(
            email=validated_data['email'],
            first_name=validated_data['first_name'],
            last_name=validated_data['last_name'],
            avatar=validated_data.get('avatar'),
            role=validated_data['role'],
            company=company,
            is_active=True
        )
        user.set_password(generated_password)
        user.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        send_mail(
            subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM",
            message=(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"–õ–æ–≥–∏–Ω: {user.email}\n"
                f"–ü–∞—Ä–æ–ª—å: {generated_password}\n\n"
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞."
            ),
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            fail_silently=False,
        )

        return user

class UserListSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'role', 'avatar']
