from rest_framework import generics, permissions, status
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.response import Response
from rest_framework.exceptions import NotFound, PermissionDenied
from rest_framework_simplejwt.views import TokenObtainPairView
from django.http import Http404

from .models import User, Industry, SubscriptionPlan, Feature, Sector, CustomRole, Company, Branch
from .serializers import (
    UserSerializer,
    OwnerRegisterSerializer,
    UserListSerializer,
    EmployeeCreateSerializer,
    CustomTokenObtainPairSerializer,
    IndustrySerializer,
    SubscriptionPlanSerializer,
    FeatureSerializer,
    CompanySerializer,
    SectorSerializer,
    EmployeeUpdateSerializer,
    ChangePasswordSerializer,
    CompanyUpdateSerializer,
    CustomRoleSerializer,
)
# —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ñ–∏–ª–∏–∞–ª–∞ (read + write)
from .serializers import BranchSerializer, BranchCreateUpdateSerializer

from .permissions import IsCompanyOwner, IsCompanyOwnerOrAdmin


# üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏
class RegisterAPIView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = OwnerRegisterSerializer
    permission_classes = [AllowAny]

    def perform_create(self, serializer):
        return serializer.save()


# üîê JWT –ª–æ–≥–∏–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer
    permission_classes = [permissions.AllowAny]


# üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
class EmployeeListAPIView(generics.ListAPIView):
    serializer_class = UserListSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):  # üëâ —Ñ–∏–∫—Å–∏–º Swagger
            return User.objects.none()

        user = self.request.user
        company = getattr(user, "owned_company", None) or user.company
        if not company:
            return User.objects.none()
        return company.employees.all()


# üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
class CurrentUserAPIView(generics.RetrieveUpdateAPIView):
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user


# ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class EmployeeCreateAPIView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = EmployeeCreateSerializer
    permission_classes = [IsAuthenticated, IsCompanyOwner]

    def perform_create(self, serializer):
        serializer.save()


# üîé –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
class SectorListAPIView(generics.ListAPIView):
    queryset = Sector.objects.all()
    serializer_class = SectorSerializer
    permission_classes = [permissions.AllowAny]


class IndustryListAPIView(generics.ListAPIView):
    queryset = Industry.objects.all()
    serializer_class = IndustrySerializer
    permission_classes = [AllowAny]


class SubscriptionPlanListAPIView(generics.ListAPIView):
    queryset = SubscriptionPlan.objects.all()
    serializer_class = SubscriptionPlanSerializer
    permission_classes = [AllowAny]


class FeatureListAPIView(generics.ListAPIView):
    queryset = Feature.objects.all()
    serializer_class = FeatureSerializer
    permission_classes = [AllowAny]


# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class EmployeeDestroyAPIView(generics.DestroyAPIView):
    queryset = User.objects.all()
    serializer_class = UserListSerializer
    permission_classes = [IsAuthenticated, IsCompanyOwner]

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return User.objects.none()

        company = getattr(self.request.user, "owned_company", None) or self.request.user.company
        return company.employees.all() if company else User.objects.none()

    def delete(self, request, *args, **kwargs):
        employee = self.get_object()
        if employee == request.user:
            return Response({'detail': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.'}, status=status.HTTP_400_BAD_REQUEST)
        return super().delete(request, *args, **kwargs)


# üè¢ –î–µ—Ç–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏
class CompanyDetailAPIView(generics.RetrieveAPIView):
    serializer_class = CompanySerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        if getattr(self, 'swagger_fake_view', False):
            return None
        company = getattr(self.request.user, 'company', None)
        if company is None:
            raise NotFound("–í—ã –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
        return company


# üë®‚Äçüíº –î–µ—Ç–∞–ª–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class EmployeeDetailAPIView(generics.RetrieveUpdateDestroyAPIView):
    queryset = User.objects.all()
    serializer_class = EmployeeUpdateSerializer
    permission_classes = [IsAuthenticated, IsCompanyOwnerOrAdmin]

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return User.objects.none()

        company = getattr(self.request.user, "owned_company", None) or self.request.user.company
        return company.employees.exclude(id=self.request.user.id) if company else User.objects.none()

    def delete(self, request, *args, **kwargs):
        employee = self.get_object()
        if employee == request.user:
            return Response({'detail': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.'}, status=status.HTTP_400_BAD_REQUEST)
        return super().delete(request, *args, **kwargs)


# üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
class ChangePasswordView(generics.UpdateAPIView):
    serializer_class = ChangePasswordSerializer
    permission_classes = [IsAuthenticated]

    def update(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response({"detail": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω."}, status=status.HTTP_200_OK)


# üè¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
class CompanyUpdateAPIView(generics.RetrieveUpdateAPIView):
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = CompanyUpdateSerializer
    # queryset DRF —Ç—Ä–µ–±—É–µ—Ç, –Ω–æ –æ–±—ä–µ–∫—Ç –±—É–¥–µ–º –¥–æ—Å—Ç–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
    queryset = Company.objects.none()

    def get_object(self):
        user = self.request.user
        company = getattr(user, "company", None) or getattr(user, "owned_company", None)
        if not company:
            raise Http404("–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return company


# ====================
# üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
# ====================

# üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π (—Å–∏—Å—Ç–µ–º–Ω—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
class RoleListAPIView(generics.ListAPIView):
    serializer_class = CustomRoleSerializer
    permission_classes = [IsAuthenticated]

    def list(self, request, *args, **kwargs):
        # —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏
        system_roles = [
            {"id": None, "name": "–í–ª–∞–¥–µ–ª–µ—Ü", "code": "owner"},
            {"id": None, "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "code": "admin"},
        ]
        if getattr(self, 'swagger_fake_view', False):
            return Response(system_roles)

        company = getattr(request.user, "company", None)
        custom_roles = CustomRole.objects.filter(company=company) if company else []
        data = system_roles + CustomRoleSerializer(custom_roles, many=True).data
        return Response(data)


# ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏
class CustomRoleCreateAPIView(generics.CreateAPIView):
    serializer_class = CustomRoleSerializer
    permission_classes = [IsAuthenticated, IsCompanyOwner]

    def perform_create(self, serializer):
        company = getattr(self.request.user, "owned_company", None) or self.request.user.company
        serializer.save(company=company)


# ‚ùå –î–µ—Ç–∞–ª–∏/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏
class CustomRoleDetailAPIView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = CustomRoleSerializer
    permission_classes = [IsAuthenticated, IsCompanyOwner]

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return CustomRole.objects.none()

        user = self.request.user
        company = getattr(user, "owned_company", None) or getattr(user, "company", None)
        if not company:
            return CustomRole.objects.none()

        return CustomRole.objects.filter(company=company)


# =========================================
# üåø –§–∏–ª–∏–∞–ª—ã: —Å–ø–∏—Å–æ–∫/—Å–æ–∑–¥–∞–Ω–∏–µ/–¥–µ—Ç–∞–ª–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
# =========================================

class BranchListCreateAPIView(generics.ListCreateAPIView):
    serializer_class = BranchSerializer
    permission_classes = [permissions.IsAuthenticated, IsCompanyOwnerOrAdmin]

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Branch.objects.none()
        user = self.request.user
        company = getattr(user, "owned_company", None) or getattr(user, "company", None)
        return Branch.objects.filter(company=company) if company else Branch.objects.none()

    def perform_create(self, serializer):
        # –í–ê–ñ–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º company —Å—é–¥–∞ ‚Äî —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç
        serializer.save()

class BranchDetailAPIView(generics.RetrieveUpdateDestroyAPIView):
    """
    GET    /api/branches/<id>/
    PATCH  /api/branches/<id>/   ‚Äî –ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–µ—Ç owner/admin
    DELETE /api/branches/<id>/   ‚Äî —É–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç owner/admin
    """
    permission_classes = [IsAuthenticated]
    queryset = Branch.objects.none()  # –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –≤ get_queryset

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return Branch.objects.none()
        user = self.request.user
        company = getattr(user, "owned_company", None) or getattr(user, "company", None)
        return Branch.objects.filter(company=company) if company else Branch.objects.none()

    def get_serializer_class(self):
        # —á—Ç–µ–Ω–∏–µ ‚Äî read-only, –∑–∞–ø–∏—Å—å ‚Äî create/update
        if self.request.method in ("GET", "HEAD"):
            return BranchSerializer
        return BranchCreateUpdateSerializer

    def perform_update(self, serializer):
        user = self.request.user
        if not (user.is_superuser or user.role in ("owner", "admin")):
            raise PermissionDenied("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞.")
        serializer.save()

    def perform_destroy(self, instance):
        user = self.request.user
        if not (user.is_superuser or user.role in ("owner", "admin")):
            raise PermissionDenied("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞.")
        instance.delete()
